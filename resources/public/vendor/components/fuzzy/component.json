{
  "name": "fuzzy",
  "description": "small, standalone fuzzy search / fuzzy filter. browser or node",
  "version": "0.0.0",
  "homepage": "https://github.com/myork/fuzzy",
  "author": {
    "name": "Matt York",
    "email": "york.matt@gmail.com",
    "url": "mattyork.org"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mattyork/fuzzy.git"
  },
  "bugs": {
    "url": "https://github.com/myork/fuzzy/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/myork/fuzzy/blob/master/LICENSE-MIT"
    }
  ],
  "main": "lib/fuzzy.js",
  "scripts": [
    "lib/fuzzy.js"
  ],
  "keywords": [
    "fuzzy",
    "search",
    "filter"
  ],
  "gitHead": "19cb3bd8880475d5fafa5ab5adad51de5687554e",
  "readme": "# fuzzy\n\n1k standalone fuzzy search / fuzzy filter a la Textmate and Sublime Text's command-T fuzzy file search. Node or browser.\n\n## Get it\n\nNode:\n\n```bash\n$ npm install fuzzy\n$ node\n> var fuzzy = require('fuzzy');\n> console.log(fuzzy)\n{ test: [Function],\n  match: [Function],\n  filter: [Function] }\n```\n\nBrowser:\n\n```html\n<script src=\"/path/to/fuzzy.js\"></script>\n<script>\n  console.log(fuzzy);\n  // Object >\n  //   filter: function (pattern, arr, opts) {\n  //   match: function (pattern, string, opts) {\n  //   test: function (pattern, string) {\n</script>\n```\n\n## Use it\n\nPadawan: Simply filter an array of strings.\n\n```javascript\nvar list = ['baconing', 'narwhal', 'a mighty bear canoe'];\nvar results = fuzzy.filter('bcn', list)\nvar matches = results.map(function(el) { return el.string; });\nconsole.log(matches);\n// [ 'baconing', 'a mighty bear canoe' ]\n```\n\nJedi: Wrap matching characters in each string\n\n```javascript\nvar list = ['baconing', 'narwhal', 'a mighty bear canoe'];\nvar options = { pre: '<', post: '>' };\nvar results = fuzzy.filter('bcn', list, options)\nconsole.log(results);\n// [\n//   {string: '<b>a<c>o<n>ing'           , index: 0, score: 3, original: 'baconing'},\n//   {string: 'a mighty <b>ear <c>a<n>oe', index: 2, score: 3, original: 'a mighty bear canoe'}\n// ]\n```\n\nJedi Master: sometimes the array you give is not an array of strings. You can\npass in a function that creates the string to match against from each element\nin the given array\n\n```javascript\nvar list = [\n    {rompalu: 'baconing', zibbity: 'simba'}\n  , {rompalu: 'narwhal' , zibbity: 'mufasa'}\n  , {rompalu: 'a mighty bear canoe', zibbity: 'saddam hussein'}\n];\nvar options = {\n    pre: '<'\n  , post: '>'\n  , extract: function(el) { return el.rompalu; }\n};\nvar results = fuzzy.filter('bcn', list, options);\nvar matches = results.map(function(el) { return el.string; });\nconsole.log(matches);\n// [ '<b>a<c>o<n>ing', 'a mighty <b>ear <c>a<n>oe' ]\n```\n\n## Examples\nCheck out the html files in the examples directory\n\n## Documentation\nCode is well documented and the unit tests cover all functionality\n\n## Contributing\nFork the repo!\n\n    git clone <your_fork>\n    cd fuzzy\n    npm install -d\n    make\n\nAdd unit tests for any new or changed functionality. Lint, test, and minify using make, then shoot me a pull request.\n\n## Release History\nv0.1.0 - July 25, 2012\n\n## License\nCopyright (c) 2012 Matt York\nLicensed under the MIT license.\n\n## TODO\n\n1. Search improvement: behave a bit more like sublime text by getting\n   the BEST match in a given string, not just the first. For example,\n   searching for 'bass' in 'bodacious bass' should match against 'bass',\n   but it currently matches like so: '<b>od<a>ciou<s> ba<s>s'. There is\n   a test already written, just need to implement it. Naive O(n^2) worst\n   case: find every match in the string, then select the highest scoring\n   match. Should benchmark this against current implementation once implemented\n",
  "readmeFilename": "README.md",
  "_id": "fuzzy@0.1.0",
  "commit": "19cb3bd8880475d5fafa5ab5adad51de5687554e"
}